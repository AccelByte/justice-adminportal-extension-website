# Copyright (c) 2020-2021 AccelByte Inc. All Rights Reserved.
# This is licensed software from AccelByte Inc, for limitations
# and restrictions contact your company contract manager

# Default values for justice-legal-website.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

namespace: ${K8S_NS}

# labels
app: justice-adminportal-extension-website
component: justice
tier: frontend
stage: ${STAGE}

image:
  tag: ${IMAGE_TAG}
  pullPolicy: Always
  pullSecret:
    name: ${IMAGE_PULL_SECRET_NAME}

replicaCount: ${REPLICAS}
autoscaling:
  replicas:
    min: ${MIN_REPLICAS}
    max: ${MAX_REPLICAS}
  threshold:
    cpu: ${HPA_CPU_THRESHOLD}
    memory: ${HPA_MEMORY_THRESHOLD}

canary:
  # determine whether flagger's canary object will included to deployment manifest (true/false)
  enabled: ${CREATE_CANARY_OBJECT}
  # istio gateway name (i.e: justice-gateway, api-justice-gateway)
  gatewayName: ${ISTIO_GATEWAY_NAME}
  # determine whether flagger's webhook will included to deployment manifest (true/false)
  #If you want to enable webhook, you need to set this and canary.enabled to true
  webhookEnabled: ${USE_FLAGGER_WEBHOOK}
  # determine progress deadline the maximum time in seconds
  # for the canary deployment to make progress before it is rolled back
  progressDeadlineSeconds: ${CANARY_PROGRESS_DEADLINE_SECONDS}
  #determine number of failed metric analysis before rollback
  analysisFailureThreshold: ${CANARY_ANALYSIS_FAILURE_THRESHOLD}
  #determine max traffic percentage to the canary version
  analysisMaxWeight: ${CANARY_ANALYSIS_MAX_WEIGHT}
  #determine traffic increment step percentage
  analysisStepWeight: ${CANARY_ANALYSIS_STEP_WEIGHT}
  #threshold for non-5xx response
  requestSuccessRateThreshold: 99
  #determine the metric check interval for request success rate
  requestSuccessRateInterval: 1m
  #determine maximum latency threshold in millisecond
  latencyThreshold: 500
  #determine the metric check interval for request latency
  latencyInterval: 1m

  # determine whether flagger's webhook for automation test will be included to canary manifest (true/false)
  flaggerAutomationTest:
    #If you want to use flagger + automation test set this and canary.webhookEnabled to true
    #If you don't set canary.webhookEnabled to true, canary.flaggerAutomationTest.enabled won't have any effect
    enabled: ${USE_FLAGGER_AUTOMATION_TEST}
    #determine the number of failed metric analysis before rollback
    failureThreshold: ${CANARY_AUTOMATION_TEST_FAILURE_THRESHOLD}
    #determine the webhook timeout. This value varies between services
    webhookTimeout: ${CANARY_AUTOMATION_TEST_WEBHOOK_TIMEOUT}
    #path for this service without leading or trailing slash
    webhookServiceBasePath: ${CANARY_AUTOMATION_TEST_SERVICE_BASEPATH}
    #name of mounted k8s secret by flagger-automation-tester pod
    k8sSecrets: ${CANARY_AUTOMATION_TEST_K8S_SECRETS}
    #name of mounted k8s configmap by flagger-automation-tester pod
    k8sConfigmap: ${CANARY_AUTOMATION_TEST_K8S_CONFIGMAP}
    #internal hostname of this service's canary pod
    serviceCanaryEndpoint: ${CANARY_AUTOMATION_TEST_SERVICE_CANARY_ENDPOINT}

service:
  # determine whether k8s service object will included to deployment manifest(true/false)
  enabled: "${INCLUDE_K8S_SERVICE_OBJECT}"
  type: NodePort
  port: 80
  # containerPort is the HTTP listener port for the container
  containerPort: 8080

virtualService:
  # determine whether k8s virtual service will be included in the deployment manifest(true/false)
  enabled: ${INCLUDE_VS}

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: ${CPU_LIMIT}
    memory: ${MEMORY_LIMIT}
  requests:
    cpu: ${CPU_REQUEST}
    memory: ${MEMORY_REQUEST}

readinessProbe:
  # PeriodSeconds specifies How often (in seconds) to perform the probe
  periodSeconds: ${READINESS_PROBE_PERIOD}
  # TimeoutSeconds is number of seconds after which the probe times out
  timeoutSeconds: ${READINESS_PROBE_TIMEOUT}
  # Specified how many times healthcheck need to be success before probe is recognized as ready.
  successThreshold: ${READINESS_PROBE_SUCCESS_THRESHOLD}
  # Specified how many times healthcheck need to be failure before probe is recognized as not ready.
  failureThreshold: ${READINESS_PROBE_FAILURE_THRESHOLD}

livenessProbe:
  # initialDelaySeconds is number of seconds after the container
  # has started before liveness probes are initiated
  initialDelaySeconds: ${LIVENESS_PROBE_INITIAL_DELAY}
  # PeriodSeconds specifies how often (in seconds) to perform the probe
  periodSeconds: ${LIVENESS_PROBE_PERIOD}

healthCheck:
  # healthCheck path is HTTP route for checking service health
  readiness:
    path: /admin-extension/healthz
  liveness:
    path: /admin-extension/healthz

justice:
  # path is the service base path (i.e: /iam, /basic, etc)
  path: ${BASE_PATH}
  # fill domain with istio gateway host
  # hint: run this following command to retrieve the value
  # kubectl get gateway/<GATEWAY_NAME> -n <K8S_NS> -o=jsonpath='{..spec.servers[0].hosts[0]}'
  domain: ${BASE_DOMAIN}
  # flag to mount common ConfigMaps across namespace
  commonVariables:
    enabled: true

cluster:
  # fill cluster provider name (i.e kops,eks,gke, etc)
  provider: "${CLUSTER_PROVIDER}"
  # resourceAccess is parameter to indicate whether the service required
  # access to Cloud Provider Resources or not
  #
  # fill with kiam, irsa , instancerole or none
  resourceAccess: "${RESOURCE_ACCESS_METHOD}"
  # NOTES :
  # if you use provider "kops" and want to have resoure access
  # you must fill with "kiam"
  # for EKS
  # You can use IRSA or Instance Role Method
  iam:
    role:
      # annotation name used as AWS resource authentication
      # fill this when choosing kops as cluster provider
      arn: ${KIAM_ROLE_ARN}

serviceAccount:
  # service account name used as AWS resource authentication
  # fill this when using non-kops cluster provider (default: justice)
  name: justice

pdb:
  # Determine PodDisruptionBudget should be created or not
  enabled: ${CREATE_PDB_OBJECT}
  # Determine `spec.minAvailable` for PDB Object
  minAvailable: ${PDB_MIN_AVAILABLE}

affinity:
  # determine spot instance interruption handling
  # with node affinity and inter-pod anti-affinity
  spotInterruptionAffinity:
    # determine to use spot interruption affinity (true/false)
    enabled: ${ENABLE_SPOT_ITN_AFFINITY}
    # determine spot itn node affinity options
    nodeAffinity:
      # determine spot itn node affinity  key
      key: ${SPOT_ITN_NODE_AFFINITY_KEY}
      # determine spot itn node affinity  values
      value: ${SPOT_ITN_NODE_AFFINITY_VALUES}
    # determine spot itn pod anti affinity options
    podAntiAffinity:
      # determine spot itn pod anti affinity main options topologKey
      topologyKey: ${SPOT_ITN_POD_ANTI_AFFINITY_TOPOLOGY_KEY}

# configMap contains required envars for service
configMap:
  service:
    # determine base url. example = "https://dev.accelbyte.io", "https://jib.<customer_name>.accelbyte.io"
    JUSTICE_BASE_URL: ${JUSTICE_BASE_URL}
    # determine base path of this service. default = "/admin-extension/"
    JUSTICE_BASE_PATH: ${JUSTICE_BASE_PATH}
    JUSTICE_PUBLISHER_NAMESPACE: ${JUSTICE_PUBLISHER_NAMESPACE}
